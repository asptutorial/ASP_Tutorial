@{
    ViewBag.Title = "Push Benachrichtigungen";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>


<p>
    @if (User.IsInRole("pushMessage"))
    {
        @Html.ActionLink("Neu Erstellen", "Create")
    }
</p>


<script type='text/javascript' src='https://s3.amazonaws.com/dynatable-docs-assets/js/jquery-1.9.1.min.js'></script>

<table id="messagesTable" cellspacing="0" width="100%">
    <thead>
        <tr>
            <th>Message</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script language="javascript" type="text/javascript">
    var messageStore;
    var firstLoad = false;
    var myVar;

    function colorStyling()
    {
        console.log("test");
        $(".notificationCodeRowRed").each(function () {
            styleNotification(this);
        });
        $(".notificationCodeRowOrange").each(function () {
            styleNotification(this);
        });
    }

    function styleNotification(el)
    {
        var counter = $(el).attr('data-notificationCounter');
        console.log("class: " + $(el).attr('class') + " counter: " + counter)

        if (counter > 0) {
            counter = counter - 1;
            $(el).attr('data-notificationCounter', counter);

            if (counter == 3) {
                $(el).attr('class', "notificationCodeRowOrange");
            }

            if (counter == 0) {
                $(el).attr('class', "basicCodeRow");
            }
        }
    }

    $.getJSON("/PushMessages/RestMessages")
      .done(function (json) {
          messageStore = json.Result;
          console.log("JSON Data: " + json.Result[0].ID);
          drawTable(messageStore);
          firstLoad = true;
          myVar = setInterval(myTimer, 2000);


      })
      .fail(function (jqxhr, textStatus, error) {
          var err = textStatus + ", " + error;
          console.log("Request Failed: " + err);
      });


    function drawTable(data) {
        for (var i = 0; i < data.length; i++) {
            appendRow(data[i]);
        }
    }

    function appendRow(rowData) {
        var row = $("<tr />")
        $("#messagesTable").append(row); 
        row.append($("<td id=" + rowData.ID + " ><pre data-notificationCounter=0 class=basicCodeRow><code><xmp>" + rowData.Message + "</xmp></code></pre></td>"));
    }

    function prepandRow(rowData) {
        var row = $("<tr />")
        $("#messagesTable").prepend(row);
        row.prepend($("<td id=" + rowData.ID + " ><pre data-notificationCounter=5 class=notificationCodeRowRed><code><xmp>" + rowData.Message + "</xmp></code></pre></td>"));
    }

    function getMax(arr, prop) {
        var max;
        for (var i = 0 ; i < arr.length ; i++) {
            if (!max || parseInt(arr[i][prop]) > parseInt(max[prop]))
                max = arr[i];
        }
        return max.ID;
    }

    function updateList()
    {
        clearTimeout(myVar);

        $.getJSON("/PushMessages/RestUpdateMessages?lastID=" + getMax(messageStore, "ID"))
              .done(function (json)
              {
                  console.log("lastID: "+getMax(messageStore, "ID"));
                  //messageStore = json.Result;
                  if (json != null)
                  {
                      console.log("JSON Data: " + json);
                      for (var i = 0; i < json.length; i++) {
                          messageStore.push(json[i]);
                          prepandRow(json[i]);
                      }

                  }
                  colorStyling();
                  myVar = setInterval(myTimer, 2000);
              })
              .fail(function (jqxhr, textStatus, error)
              {
                  var err = textStatus + ", " + error;
                  console.log("Request Failed: " + err);
                  myVar = setInterval(myTimer, 2000);
              });
    }

    function myTimer() {
        if (firstLoad) {
            updateList();
        }
    };



</script>

